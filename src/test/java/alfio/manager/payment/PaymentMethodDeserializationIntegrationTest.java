/**
 * This file is part of alf.io.
 *
 * alf.io is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * alf.io is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with alf.io.  If not, see <http://www.gnu.org/licenses/>.
 */
package alfio.manager.payment;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.util.List;

import org.junit.jupiter.api.Test;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;

import alfio.TestConfiguration;
import alfio.config.DataSourceConfiguration;
import alfio.config.Initializer;
import alfio.controller.form.PaymentForm;
import alfio.model.transaction.PaymentMethod;
import alfio.model.transaction.StaticPaymentMethods;
import alfio.model.transaction.UserDefinedOfflinePaymentMethod;
import alfio.test.util.AlfioIntegrationTest;

/**
 * Tests the custom deserialization logic for payment method deserialization.
 *
 * Payment methods can be statically defined or dynamically generated by the user.
 * These tests ensure the correct output PaymentMethod type is deserialized from
 * received API JSON.
 */
@AlfioIntegrationTest
@ContextConfiguration(classes = {DataSourceConfiguration.class, TestConfiguration.class})
@ActiveProfiles({Initializer.PROFILE_DEV, Initializer.PROFILE_DISABLE_JOBS, Initializer.PROFILE_INTEGRATION_TEST})
class PaymentMethodDeserializationIntegrationTest {

    @Autowired
    private ObjectMapper objectMapper;

    @Test
    void testStaticPaymentMethodDeserialization() throws JsonProcessingException {
        String json = """
            {
                "termAndConditionsAccepted": true,
                "privacyPolicyAccepted": true,
                "selectedPaymentMethod": "CREDIT_CARD",
                "paymentProxy": "STRIPE",
                "gatewayToken": null,
                "captcha": null
            }
                """;

        PaymentForm paymentForm = objectMapper.readValue(json, PaymentForm.class);
        PaymentMethod paymentMethod = paymentForm.getSelectedPaymentMethod();

        assertNotNull(paymentMethod);
        assertTrue(paymentMethod instanceof StaticPaymentMethods);
        assertEquals(StaticPaymentMethods.CREDIT_CARD, paymentMethod);
    }

    @Test
    void testDeletedUserDefinedPaymentMethodsDeserialization() throws JsonProcessingException {
        String json = """
            [
                {
                    "paymentMethodId": "90561fe0-b514-462d-a966-8248b86c1c70",
                    "localizations": {
                        "en": {
                            "paymentName": "Interac E-Transfer",
                            "paymentDescription": "Interac Description",
                            "paymentInstructions": "Interac Instructions"
                        }
                    },
                    "deleted": true
                }
            ]

                """;

        var paymentMethods = objectMapper.readValue(json, new TypeReference<List<UserDefinedOfflinePaymentMethod>>() {});
        assertEquals(1, paymentMethods.size());

        var paymentMethod = paymentMethods.get(0);
        assertEquals("90561fe0-b514-462d-a966-8248b86c1c70", paymentMethod.getPaymentMethodId());
        assertEquals(1, paymentMethod.getLocalizations().size());
        assertTrue(paymentMethod.getLocalizations().containsKey("en"));

        var localization = paymentMethod.getLocaleByKey("en");
        assertEquals("Interac Description", localization.getPaymentDescription());
        assertEquals("Interac Instructions", localization.getPaymentInstructions());

        assertTrue(paymentMethod.isDeleted());
    }
}
